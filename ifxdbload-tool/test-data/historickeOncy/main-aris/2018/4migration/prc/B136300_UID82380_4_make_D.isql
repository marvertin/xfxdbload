create PROCEDURE B136300_UID82380_4_make_D (-- vstupni paramtery
                                    ABezTransakci integer default 0,    -- slouzi k testovacim ucelum,
                                                                        -- kdy si uzivatel sam ridi transakce
                                                                        -- muze pouzivat i zakaznik
                                    ADebugFile    Char(30) default null -- priznak zda vytvaret debug file, pokud je vyplneny
)

define _ser          Int;
define _os           Int;
define _pobytinterni Int;

--povinne globalni promenne
define global TW_ErrSql   Int          default null;
define global TW_ErrIsam  Int          default null;
define global TW_ErrText  VarChar(255) default null;

--osetreni chyby pri konstrukci kursoru
on exception set TW_ErrSql, TW_ErrIsam, TW_ErrText
   call TW_ErrorTran();
end exception;

--izolacni uroven bude commited read
SET ISOLATION TO COMMITTED READ;

if(PD_TraceRequestedBegin(ADebugFile) = 1) then
  trace on;
end if;

--ZACATEK vlastni migrace
if(ABezTransakci = 0) then
   BEGIN WORK;
end if;

if ABezTransakci = 0 then
   COMMIT WORK;
   BEGIN WORK;
end if;

--pres ridici tabulku
foreach cc2 with hold for
  SELECT ser, os, pobytinterni
  INTO _ser, _os,_pobytinterni
  FROM B136300_UID82380
  WHERE zprac < 0
  ORDER BY ser

  begin
    --osetreni chyby - pokracovat se bude na dalsim radku ridici tabulkz
    on exception set TW_ErrSql, TW_ErrIsam, TW_ErrText
      --rollback transakce
      if(ABezTransakci = 0) then
         ROLLBACK WORK;
      end if;
      --ulozime chybu do ridici tabulky
      UPDATE B136300_UID82380
        SET(NumErr,ISAMErr,TextErr) = (TW_ErrSql, TW_ErrIsam, TW_ErrText)
        WHERE ser=_ser;
      --zahajeni transakce migrace
      if(ABezTransakci = 0) then
         BEGIN WORK;
      end if;
    end exception;
    
    --vlastni algoritmus migrace
    UPDATE eo_fo_mat SET refdruhpobytinterni = _pobytinterni WHERE fo = _os;
    
    --konec algoritmu migrace
    
    UPDATE B136300_UID82380 SET zprac = 1, NumErr = null, ISAMErr = null, TextErr = null  WHERE ser=_ser;
  end;

  --nova transakce
  if(ABezTransakci = 0) then
    COMMIT WORK;
    BEGIN WORK;
  end if;
end foreach;

if(ABezTransakci = 0) then
   COMMIT WORK;
--KONEC vlastni migrace

--ZACATEK dokonceni migrace (pokud dokonceni existuje)
   BEGIN WORK;
end if;

--algoritmus dokonceni migrace
--...

if(PD_TraceRequestedEnd(ADebugFile) = 1) then
  trace off;
end if;

if(ABezTransakci = 0) then
   COMMIT WORK;
end if;
--KONEC dokonceni migrace

if exists(SELECT * FROM B136300_UID82380 WHERE zprac < 0) then
  call TW_RaiseError('136B241TCUI', 'B136300_UID82380_4_make_D', 'Během migrace interního pobytu FO došlo k chybě.'); 
end if;

end procedure;