-----------------------------------------------------------------------------
--
--  Template migracni pripravne procedury pro featuru RN00282679
--
-----------------------------------------------------------------------------
create PROCEDURE A46593_RN00282679_find_D ()

define _ser          Int;
define _smlouva Dec(16,0);
define _tsml Char(4);
define _realn Int;
define _poradi Int;
define _faze Int;
define _datprov Date;
define _pocet Int;
define _tuhr1 Char(8);
define _tuhr2 Char(8);
define _provtime Datetime Year to Second;

--povinne globalni promenne
define global TW_ErrSql   Int          default null;
define global TW_ErrIsam  Int          default null;
define global TW_ErrText  VarChar(255) default null;

on exception set TW_ErrSql, TW_ErrIsam, TW_ErrText
   call TW_ErrorTran();
end exception;


--izolacni uroven bude dirty read
SET ISOLATION TO DIRTY READ;

BEGIN WORK;


--zruseni tabulky pokud jiz existuje
begin
   on exception IN(-206)
   end exception;
  DROP TABLE RN00282679;
end;

--zalozime ridici tabulku
CREATE TABLE RN00282679(
  Ser     Serial NOT NULL,  --èíslo øádku
  NumErr  Int,              --èíslo chyby, jež na øádku nastala
  ISAMErr Int,              --èíslo ISAM chyby, jež na øádku nastala
  TextErr VarChar(255),     --textový popis chyby, jež na øádku nastala
  zprac   SmallInt,         -- pøíznak zda je záznam zpracován  (kladné èíslo   - zpracováno   (defaultnì  1)
                            -- záporné èíslo  - nezpracováno (defaultnì -1))

                            --vlastni data - napø. cislo osoby
  realn   Int,
  poradi  Int,
  faze    Int,
  datprov Date,

  PRIMARY KEY(Ser)
)LOCK MODE ROW;

let _tuhr1 = TW_RegGetKey('RU', 'vyzva-faze1', '*', 'tuhr', 'x');
let _tuhr2 = TW_RegGetKey('RU', 'vyzva-faze2', '*', 'tuhr', 'x');

--plnime ridici tabulku - napr. z osob
--dulezite je poradi vybiranych radku - v tomto poradi se budou
--ukladat do ridici tabulky a v tomto poradi se bude i migrovat
foreach cc1 with hold for
   SELECT v.realn, v.faze, v.datprov, MIN(poradi), COUNT(*)
   INTO _realn, _faze, _datprov, _poradi, _pocet 
   FROM RU_Vyzva_Kart v 
   WHERE v.stav = 'C' AND v.poplzapocten = 0 
     AND NOT EXISTS(SELECT * FROM RU_Vyzva_Kart WHERE realn = v.realn AND faze = v.faze AND poplzapocten = 1)
   GROUP BY v.realn, v.faze, v.datprov
   
   SELECT smlouva, tsml INTO _smlouva, _tsml FROM RU_Real_Mat WHERE realn = _realn;

   SELECT MIN(provtime) INTO _provtime FROM EP_Uhr_Kart WHERE smlouva = _smlouva AND tsml = _tsml AND datprov = _datprov AND stav = 'C' AND ((_faze = 1 AND tuhr = _tuhr1) OR (_faze = 2 AND tuhr = _tuhr2));
   if _provtime is null then
     continue foreach;
   end if;
     
   if _pocet > 1 then
     SELECT MIN(poradi) INTO _poradi
     FROM RU_Vyzva_Kart 
     WHERE realn = _realn AND faze = _faze AND datprov = _datprov AND provtime = _provtime
     GROUP BY realn, faze, datprov, provtime;
     
     if _poradi is null then
       SELECT MIN(poradi) INTO _poradi FROM RU_Vyzva_Kart WHERE realn = _realn AND faze = _faze AND datprov = _datprov;
     end if;
   end if;

   INSERT INTO RN00282679(realn, poradi, faze, datprov, zprac)
   VALUES(_realn, _poradi, _faze, _datprov, -1);

   --nova transakce
   COMMIT WORK;
   BEGIN WORK;

end foreach;

--UPDATE STATISTICS

UPDATE STATISTICS HIGH FOR TABLE RN00282679;

--konec transakce pripravy
COMMIT WORK;

end procedure;